// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// ENUMS for controlled vocabulary
enum Role {
  ADMIN
  MENTOR
  MENTEE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SessionStatus {
  UPCOMING
  COMPLETED
  CANCELED
}

// MODELS (Tables)
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  role              Role      @default(MENTEE)
  bio               String?   @db.Text // Using @db.Text for longer bios
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // --- NEW FIELDS FOR PROFILE 2.0 ---
  title             String?   // e.g., "Senior Software Engineer"
  company           String?   // e.g., "Tech Corp Inc."
  socialLinks       Json?     // Store links like { "linkedin": "...", "github": "..." }

  // Indexes (these are correct from the last step)
  @@index([role, name])

  // All existing relations remain the same
  skills            UserSkill[]
  requestsSent      MentorshipRequest[] @relation("MenteeRequests")
  requestsReceived  MentorshipRequest[] @relation("MentorRequests")
  sessionsAsMentee  Session[]           @relation("MenteeSessions")
  sessionsAsMentor  Session[]           @relation("MentorSessions")
  feedbackGiven     Feedback[]
  availability      Availability[]
  passwordResetToken       String?    @unique
  passwordResetTokenExpiry DateTime?
  avatarUrl         String?
  sentMessages      Message[]           @relation("SentMessages")
  receivedMessages  Message[]           @relation("ReceivedMessages")
  notifications     Notification[]
}

model Skill {
  id      String @id @default(cuid())
  name    String @unique
  users   UserSkill[]
}

model UserSkill {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  
  @@id([userId, skillId])
}

model MentorshipRequest {
  id        String        @id @default(cuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  mentee    User   @relation("MenteeRequests", fields: [menteeId], references: [id])
  menteeId  String
  mentor    User   @relation("MentorRequests", fields: [mentorId], references: [id])
  mentorId  String

  // --- SCALE UP 1.1: Add Index for Status ---
  // We constantly filter requests by their status (e.g., finding 'ACCEPTED' ones).
  // Indexing 'status' alongside the foreign keys will make these queries very fast.
  @@index([menteeId, status])
  @@index([mentorId, status])

  session   Session?
  messages Message[]
}

model Session {
  id              String        @id @default(cuid())
  scheduledTime   DateTime
  status          SessionStatus @default(UPCOMING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  mentee          User   @relation("MenteeSessions", fields: [menteeId], references: [id])
  menteeId        String
  mentor          User   @relation("MentorSessions", fields: [mentorId], references: [id])
  mentorId        String

  request         MentorshipRequest @relation(fields: [requestId], references: [id])
  requestId       String            @unique

  feedback        Feedback?
  
  // --- SCALE UP 1.1: Add Composite Index for Session Lookups ---
  // Sessions are always looked up in the context of a specific user and their status.
  // This composite index on both the user and the status is optimal.
  @@index([menteeId, status])
  @@index([mentorId, status])
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String   @unique

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String

  mentor    User     @relation(fields: [mentorId], references: [id])
  mentorId  String

  @@unique([mentorId, dayOfWeek, startTime, endTime])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  
  request   MentorshipRequest @relation(fields: [requestId], references: [id])
  requestId String

  isRead    Boolean  @default(false)
  
  // --- SCALE UP 1.1: Add Index for Chat History ---
  // When fetching chat messages, we always do it for a specific request.
  // Indexing the 'requestId' will significantly speed up loading chat histories.
  @@index([requestId])
}

model Notification {
  id        String    @id @default(cuid())
  message   String    // The content of the notification, e.g., "Jane Doe accepted your request."
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  // A link to navigate to when the notification is clicked.
  // Optional, as some notifications may not be actionable.
  link      String?

  // The user who receives this notification.
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  // Add an index for fetching a user's notifications quickly.
  @@index([userId])
}
