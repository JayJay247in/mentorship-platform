// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS for controlled vocabulary
enum Role {
  ADMIN
  MENTOR
  MENTEE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SessionStatus {
  UPCOMING
  COMPLETED
  CANCELED
}

// MODELS (Tables)
model User {
  id                String  @id @default(cuid())
  email             String  @unique
  password          String
  name              String
  role              Role    @default(MENTEE)
  bio               String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  skills            UserSkill[]
  requestsSent      MentorshipRequest[] @relation("MenteeRequests")
  requestsReceived  MentorshipRequest[] @relation("MentorRequests")
  sessionsAsMentee  Session[]           @relation("MenteeSessions")
  sessionsAsMentor  Session[]           @relation("MentorSessions")
  feedbackGiven     Feedback[]
  availability      Availability[]
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  avatarUrl   String?
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
}

model Skill {
  id      String @id @default(cuid())
  name    String @unique
  users   UserSkill[]
}

// This is a "join table" for the many-to-many relationship between Users and Skills
model UserSkill {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  
  @@id([userId, skillId])
}

model MentorshipRequest {
  id        String        @id @default(cuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  mentee    User   @relation("MenteeRequests", fields: [menteeId], references: [id])
  menteeId  String
  mentor    User   @relation("MentorRequests", fields: [mentorId], references: [id])
  mentorId  String

  // A mentorship request can lead to one session
  session   Session?
  messages Message[]
}

model Session {
  id              String        @id @default(cuid())
  scheduledTime   DateTime
  status          SessionStatus @default(UPCOMING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  mentee          User   @relation("MenteeSessions", fields: [menteeId], references: [id])
  menteeId        String
  mentor          User   @relation("MentorSessions", fields: [mentorId], references: [id])
  mentorId        String

  // A session has one original request
  request         MentorshipRequest @relation(fields: [requestId], references: [id])
  requestId       String            @unique

  feedback        Feedback?
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int      // Rating from 1 to 5
  comment   String?
  createdAt DateTime @default(now())

  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String   @unique

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime String   // e.g., "09:00" in 24-hour format
  endTime   String   // e.g., "17:00"

  mentor    User     @relation(fields: [mentorId], references: [id])
  mentorId  String

  @@unique([mentorId, dayOfWeek, startTime, endTime]) // Prevent duplicate slots
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // The user who sent the message
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String

  // The user who received the message
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  
  // Link the message to the specific mentorship request/match
  request   MentorshipRequest @relation(fields: [requestId], references: [id])
  requestId String

  isRead    Boolean  @default(false)
}